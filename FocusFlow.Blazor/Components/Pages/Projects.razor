@page "/projects"
@rendermode InteractiveServer

@using FocusFlow.Abstractions.DTOs

<h3>Projects</h3>

<button @onclick="CreateProject">Create New Project</button>

<table>
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var project in projects)
        {
            <tr>
                <td>@project.Name</td>
                <td>@project.Description</td>
                <td>
                    <button @onclick="() => EditProject(project)">Edit</button>
                    <button @onclick="() => DeleteProject(project.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>


@inject IHttpClientFactory HttpClientFactory
@code {
    private List<ProjectDto> projects = new();
    private HttpClient _client;

    protected override async Task OnInitializedAsync()
    {
        _client = HttpClientFactory.CreateClient("MyApi");
        projects = await _client.GetFromJsonAsync<List<ProjectDto>>("api/projects");
    }

    private async Task CreateProject()
    {
        var newProject = new ProjectDtoBase { Name = "New Project", Description = "Description" };
        var response = await _client.PostAsJsonAsync("api/projects", newProject);
        if (response.IsSuccessStatusCode)
        {
            projects = await _client.GetFromJsonAsync<List<ProjectDto>>("api/projects");
        }
    }

    private async Task EditProject(ProjectDto project)
    {
        project.Name += " (Edited)";
        var response = await _client.PutAsJsonAsync($"api/projects/{project.Id}", project);
        if (response.IsSuccessStatusCode)
        {
            projects = await _client.GetFromJsonAsync<List<ProjectDto>>("api/projects");
        }
    }

    private async Task DeleteProject(Guid projectId)
    {
        var response = await _client.DeleteAsync($"api/projects/{projectId}");
        if (response.IsSuccessStatusCode)
        {
            projects = await _client.GetFromJsonAsync<List<ProjectDto>>("api/projects");
        }
    }  
}