@page "/projects"
@rendermode InteractiveServer

@using FocusFlow.Abstractions.Api.Shared
@using FocusFlow.Blazor.Extensions

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <h2 class="mb-0"><i class="bi bi-kanban-fill"></i> Projects</h2>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-0">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item active" aria-current="page">Projects</li>
            </ol>
        </nav>
    </div>
    <div>
        <button class="btn btn-primary" @onclick="() => NavigateToCreatePage()">
            <i class="bi bi-plus-lg"></i> Create New Project
        </button>
    </div>
</div>

<div class="d-flex justify-content-end align-items-center gap-2 mb-3">
    <span>Show</span>
    <select class="form-select form-select-sm w-auto" @bind="pageSize">
        <option value="5">5</option>
        <option value="10">10</option>
        <option value="25">25</option>
        <option value="50">50</option>
    </select>
    <span>entries</span>
</div>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-warning">@(IsSubmitting ? "Saving..." : "Save")</div>
}

<div class="table-responsive" style="max-height: 600px; overflow-y: auto;">
    <table class="table table-hover table-striped border mb-0">
        <thead class="table-light sticky-top">
            <tr>
                <th style="width: 150px;">
                    <input type="text" class="form-control form-control-sm" placeholder="Filter name..."
                           @bind="nameFilter" @bind:event="oninput" />
                </th>
                <th style="width: 250px;">
                    <input type="text" class="form-control form-control-sm" placeholder="Filter description..."
                           @bind="descriptionFilter" @bind:event="oninput" />
                </th>
                <th style="width: 150px;">
                    <input type="text" class="form-control form-control-sm" placeholder="Filter created by..."
                           @bind="createdByFilter" @bind:event="oninput" />
                </th>
                <th style="width: 150px;">
                    <input type="text" class="form-control form-control-sm" placeholder="Filter updated by..."
                           @bind="updatedByFilter" @bind:event="oninput" />
                </th>
                <th style="width: 140px;">
                    <input type="date" class="form-control form-control-sm"
                           @bind="createdDateFilter" @bind:event="oninput" />
                </th>
                <th style="width: 140px;">
                    <input type="date" class="form-control form-control-sm"
                           @bind="updatedDateFilter" @bind:event="oninput" />
                </th>
                <th style="width: 160px;">Actions</th>
            </tr>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Created By</th>
                <th>Updated By</th>
                <th>Created At</th>
                <th>Updated At</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var model in PagedModels)
            {
                <tr>
                    <td>@model.Name</td>
                    <td>
                        <span class="d-inline-block text-truncate w-100" style="max-width: 230px;"
                              title="@model.Description">
                            @model.Description
                        </span>
                    </td>
                    <td>@model.CreatedByInfo</td>
                    <td>@model.UpdatedByInfo</td>
                    <td>@model.CreatedAtFormatted()</td>
                    <td>@model.UpdatedAtFormatted()</td>
                    <td>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-warning" @onclick="() => NavigateToEditPage(model.Id)">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ShowDeletePrompt(model)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="table-footer bg-light border-top px-3 py-2">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            Showing @(((currentPage - 1) * pageSize) + 1) to @Math.Min(currentPage * pageSize, FilteredModels.Count()) of @FilteredModels.Count() entries
        </div>
        <div>
            <button class="btn btn-sm btn-secondary" @onclick="PreviousPage" disabled="@(currentPage == 1)">
                <i class="bi bi-chevron-left"></i>
            </button>
            <span class="mx-2">Page @currentPage of @TotalPages</span>
            <button class="btn btn-sm btn-secondary" @onclick="NextPage" disabled="@(currentPage == TotalPages)">
                <i class="bi bi-chevron-right"></i>
            </button>
        </div>
    </div>
</div>

@if (showDeletePrompt)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete project "@modelToDelete?.Name"?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@code {
    private string Route = "api/projects";
    private async Task<List<ProjectDto>> GetModelsAsync() => await HttpClientFactory.LocalApi().GetFromJsonAsync<List<ProjectDto>>(Route);
    private List<ProjectDto> Models = new();
    private bool IsSubmitting = false;
    private string ErrorMessage;

    private string nameFilter = "";
    private string descriptionFilter = "";
    private string createdByFilter = "";
    private string updatedByFilter = "";
    private DateTime? createdDateFilter;
    private DateTime? updatedDateFilter;

    private int pageSize = 10;
    private int currentPage = 1;
    private bool showDeletePrompt = false;
    private ProjectDto? modelToDelete;

    private IEnumerable<ProjectDto> FilteredModels => Models
        .Where(p => string.IsNullOrEmpty(nameFilter) || p.Name.Contains(nameFilter, StringComparison.OrdinalIgnoreCase))
        .Where(p => string.IsNullOrEmpty(descriptionFilter) || (p.Description?.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase) ?? false))
        .Where(p => string.IsNullOrEmpty(createdByFilter) || p.CreatedByInfo.Contains(createdByFilter, StringComparison.OrdinalIgnoreCase))
        .Where(p => string.IsNullOrEmpty(updatedByFilter) || p.UpdatedByInfo.Contains(updatedByFilter, StringComparison.OrdinalIgnoreCase))
        .Where(p => !createdDateFilter.HasValue || p.CreatedAt.Date == createdDateFilter.Value.Date)
        .Where(p => !updatedDateFilter.HasValue || p.UpdatedAt.Date == updatedDateFilter.Value.Date);

    private IEnumerable<ProjectDto> PagedModels => FilteredModels
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    private int TotalPages => (int)Math.Ceiling(FilteredModels.Count() / (double)pageSize);

    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }

    private void NextPage()
    {
        if (currentPage < TotalPages)
            currentPage++;
    }

    private void ShowDeletePrompt(ProjectDto model)
    {
        modelToDelete = model;
        showDeletePrompt = true;
    }

    private void CancelDelete()
    {
        showDeletePrompt = false;
        modelToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (modelToDelete != null)
        {
            await DeleteModel(modelToDelete.Id);
            showDeletePrompt = false;
            modelToDelete = null;
        }
    }

    protected override async Task OnInitializedAsync() => Models = await GetModelsAsync();

    private void NavigateToCreatePage() => NavigationManager.NavigateTo($"/projects/edit");

	private void NavigateToEditPage(Guid modelId) => NavigationManager.NavigateTo($"/projects/edit/{modelId}");

    private async Task DeleteModel(Guid modelId)
    {
        IsSubmitting = true;
        ErrorMessage = null;
        try
		{			
            var response = await HttpClientFactory.LocalApi().DeleteAsync($"{Route}/{modelId}");
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/projects", true);
            }           
			else
			{
                ErrorMessage = response.ReasonPhrase;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"{ex.Message}";
        }
		finally
		{
			IsSubmitting = false;
		}
       
    }  
}