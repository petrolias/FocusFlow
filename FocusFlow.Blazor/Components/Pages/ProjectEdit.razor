@page "/projects/edit/{ModelId:guid?}"
@rendermode InteractiveServer
@using FocusFlow.Abstractions.Api.Shared
@using FocusFlow.Blazor.Extensions
<PageTitle>Edit Project</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="card-title mb-4">@(IsEditMode ? "✏️ Edit Project" : "➕ Add Project")</h3>

                    <EditForm Model="Model" OnValidSubmit="SaveProject" FormName="editProjectForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="Model.Name" />
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="Model.Description" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Created By</label>
                            <p class="form-control-plaintext">@Model.CreatedByInfo</p>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Updated By</label>
                            <p class="form-control-plaintext">@Model.UpdatedByInfo</p>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Created At</label>
                            <p class="form-control-plaintext">@Model.CreatedAtFormatted()</p>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Updated At</label>
                            <p class="form-control-plaintext">@Model.UpdatedAtFormatted()</p>
                        </div>

                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <div class="alert alert-danger">@ErrorMessage</div>
                        }

                        <div class="d-flex justify-content-end gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@IsSubmitting">
                                @(IsSubmitting ? "Saving..." : "Save")
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@code {
    private string Route = "api/projects";
    private async Task<ProjectDto> GetModelAsync(Guid modelId) => await HttpClientFactory.LocalApi().GetFromJsonAsync<ProjectDto>($"{Route}/{modelId}");
    [Parameter] public Guid? ModelId { get; set; }
    [SupplyParameterFromForm]
    private ProjectDto Model { get; set; } = new ();
    private bool IsSubmitting = false;
    private string ErrorMessage;
    private bool IsEditMode => ModelId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
            Model = await GetModelAsync(ModelId.Value);
    }

    private async Task SaveProject()
    {
        IsSubmitting = true;
        ErrorMessage = null;

        try
        {
            HttpResponseMessage response;
            if (IsEditMode)
            {
                response = await HttpClientFactory.LocalApi().PutAsJsonAsync($"{Route}/{ModelId}", Model);
            }
            else
            {
                response = await HttpClientFactory.LocalApi().PostAsJsonAsync(Route, Model);
            }

            if (response.IsSuccessStatusCode)
            {
                if (!IsEditMode)
                {
                    var createdModel = await response.Content.ReadFromJsonAsync<ProjectDto>();
                    NavigationManager.NavigateTo($"/projects/edit/{createdModel.Id}");
                }
                else
                {
                    Model = await GetModelAsync(ModelId.Value);
                }
            }
            else
            {
                ErrorMessage = response.ReasonPhrase;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"{ErrorMessage} {ex.Message}";
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/projects");
    }
}