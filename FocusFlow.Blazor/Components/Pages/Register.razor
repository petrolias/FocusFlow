@page "/register"
@rendermode InteractiveServer
@using FocusFlow.Abstractions.Extensions
@using FocusFlow.Abstractions.Api.Shared
@using FocusFlow.Blazor.Extensions
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Register</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="card-title mb-4 text-center">📝 Register</h3>

                    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" @bind-Value="registerModel.Password" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <InputText id="confirmPassword" type="password" @bind-Value="registerModel.ConfirmPassword" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-danger" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Register</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterDto registerModel = new();
    private string errorMessage;

    private async Task HandleRegister()
    {
        try
        {
            var response = await HttpClientFactory.AddUserAsync(registerModel);
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var message = await response.Content.ReadAsStringAsync();
                errorMessage = "Registration failed: " + await response.ReadErrorMessageAsync();
            }
        }
        catch
        {
            errorMessage = "An unexpected error occurred. Please try again.";
        }
    }
}
