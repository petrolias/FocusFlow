@page "/login"
@page "/login/{action}"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Text.Json
@using FocusFlow.Abstractions.Api.Shared
@using FocusFlow.Abstractions.Extensions
@using FocusFlow.Blazor;
@using FocusFlow.Blazor.Extensions
@using FocusFlow.Blazor.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JS
<h3>Login</h3>
<EditForm Model="LoginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label for="email">Email</label>
		<InputText id="email" class="form-control" @bind-Value="LoginModel.Email" />
		<ValidationMessage For="@(() => LoginModel.Email)" />
	</div>

	<div class="form-group">
		<label for="password">Password</label>
		<InputText id="password" class="form-control" type="password" @bind-Value="LoginModel.Password" />
		<ValidationMessage For="@(() => LoginModel.Password)" />
	</div>

	@if (!string.IsNullOrEmpty(ErrorMessage))
	{
		<div class="alert alert-danger">@ErrorMessage</div>
	}

	<button type="submit" class="btn btn-primary" disabled="@IsSubmitting">
		@(IsSubmitting ? "Logging in..." : "Login")
	</button>
</EditForm>

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS
@inject IHttpClientFactory HttpClientFactory
@code {
	[Parameter]
	public string? action { get; set; }

	[SupplyParameterFromForm]
	private LoginDto LoginModel { get; set; } = new();
	private bool IsSubmitting = false;
	private string ErrorMessage;	

	protected override async Task OnAfterRenderAsync(bool firstRender)	{
		if (action == "out")
		{
			await JS.InvokeVoidAsync("clearCookiesAndReload");			
			NavigationManager.NavigateTo("/Login");
		}

		if(firstRender)
		{
			// Do work to load page data and set properties
		}
	}

	private async Task HandleLogin()
	{
		IsSubmitting = true;
		ErrorMessage = null;

		try
		{
			var errorMessage = "Login failed. Please try again.";
			var response = await HttpClientFactory.GetTokenAsync(LoginModel);
			if (response.IsSuccessStatusCode)
			{
				var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
				var cookieObject = new CookieModel { Token = tokenResponse.Token, Email = LoginModel.Email }.ToJson();
				if (tokenResponse?.Token != null)
				{
					await JS.InvokeVoidAsync("setCookie", Constants.CookieAccessToken, tokenResponse.Token, 60); // expires in 60 mins
					await JS.InvokeVoidAsync("setCookie", Constants.CookieData, LoginModel.Email, 60); // expires in 60 mins
					NavigationManager.NavigateTo("/", forceLoad: true);
					return;
				}

				ErrorMessage = errorMessage;
			}
			else
			{
				ErrorMessage = response.ReasonPhrase;
			}
		}
		catch (Exception ex)
		{
			ErrorMessage = $"Login failed: {ex.Message}";
		}
		finally
		{
			IsSubmitting = false;
		}
	}
}
