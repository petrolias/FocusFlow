@page "/login"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Text.Json
@using FocusFlow.Abstractions.Api.Shared
@using FocusFlow.Blazor.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Login</h3>

<EditForm Model="LoginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label for="email">Email</label>
		<InputText id="email" class="form-control" @bind-Value="LoginModel.Email" />
		<ValidationMessage For="@(() => LoginModel.Email)" />
	</div>

	<div class="form-group">
		<label for="password">Password</label>
		<InputText id="password" class="form-control" type="password" @bind-Value="LoginModel.Password" />
		<ValidationMessage For="@(() => LoginModel.Password)" />
	</div>

	@if (!string.IsNullOrEmpty(ErrorMessage))
	{
		<div class="alert alert-danger">@ErrorMessage</div>
	}

	<button type="submit" class="btn btn-primary" disabled="@IsSubmitting">
		@(IsSubmitting ? "Logging in..." : "Login")
	</button>
</EditForm>

@inject IHttpClientFactory HttpClientFactory
@code {	
	[SupplyParameterFromForm]
	private LoginDto LoginModel { get; set; } = new();
	private bool IsSubmitting = false;
	private string ErrorMessage;	

	protected override async Task OnInitializedAsync()
	{		
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		if (authState.User.Identity?.IsAuthenticated == true)
		{
			NavigationManager.NavigateTo("/");
		}
	}

	private async Task HandleLogin()
	{
		IsSubmitting = true;
		ErrorMessage = null;

		try
		{
			var response = await HttpClientFactory.LocalApi().PostAsJsonAsync("/api/auth/login", LoginModel);
			if (response.IsSuccessStatusCode)
			{
				var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();

				if (tokenResponse?.Token != null)
				{					
					await JS.InvokeVoidAsync("setCookie", Constants.CookieAccessToken, tokenResponse.Token, 60); // expires in 60 mins
					NavigationManager.NavigateTo("/", forceLoad: true);
				}
				else
				{
					ErrorMessage = "Login succeeded but token was missing.";
				}
			}
			else if (response.StatusCode == HttpStatusCode.Unauthorized)
			{
				ErrorMessage = "Invalid username or password.";
			}
			else
			{
				ErrorMessage = $"Unexpected error: {(int)response.StatusCode} - {response.ReasonPhrase}";
			}
		}
		catch (Exception ex)
		{
			ErrorMessage = $"Login failed: {ex.Message}";
		}
		finally
		{
			IsSubmitting = false;
		}
	}		
}
