@page "/tasks/edit/{ModelId:guid?}"
@rendermode InteractiveServer

@using FocusFlow.Abstractions.Api.Shared
@using FocusFlow.Abstractions.Constants
@using FocusFlow.Blazor.Extensions
@using System.ComponentModel.DataAnnotations

<PageTitle>Edit Task</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="card-title mb-4">@(IsEditMode ? "✏️ Edit Task" : "➕ Add Task")</h3>

                    <EditForm Model="Model" OnValidSubmit="SaveTask">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Title</label>
                            <InputText class="form-control" @bind-Value="Model.Title" placeholder="Enter a task title..." />
                            <ValidationMessage For="@(() => Model.Title)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" @bind-Value="Model.Description" placeholder="Describe the task..." />
                            <ValidationMessage For="@(() => Model.Description)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Due Date</label>
                            <InputDate class="form-control" @bind-Value="Model.DueDate" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Priority</label>
                            <InputSelect class="form-select" @bind-Value="Model.Priority">
                                <option value="">Select priority</option>
                                @foreach (var value in Enum.GetValues<TaskItemPriorityEnum>())
                                {
                                    <option value="@value">@value</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => Model.Priority)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <InputSelect class="form-select" @bind-Value="Model.Status">
                                <option value="">Select status</option>
                                @foreach (var value in Enum.GetValues<TaskItemStatusEnum>())
                                {
                                    <option value="@value">@value</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => Model.Status)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Assigned User</label>
                            <InputText class="form-control" @bind-Value="Model.AssignedUserId" placeholder="User ID or email..." />
                        </div>

                        @* <div class="mb-3"> *@
                        @*     <label class="form-label">Project ID</label> *@
                        @*     <InputText class="form-control" @bind-Value="Model.ProjectId" placeholder="Project ID..." /> *@
                        @* </div> *@

                        <div class="mb-3">
                            <label class="form-label">Created By</label>
                            <div class="form-control bg-light">@Model.CreatedByInfo</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Updated By</label>
                            <div class="form-control bg-light">@Model.UpdatedByInfo</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Created At</label>
                            <div class="form-control bg-light">@Model.CreatedAtDateFormatted()</div>
                        </div>

                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <div class="alert alert-danger">@ErrorMessage</div>
                        }

                        <div class="d-flex justify-content-end gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@IsSubmitting">
                                @(IsSubmitting ? "Saving..." : "Save")
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@code {
    private string Route = "api/tasks";

    [Parameter] public Guid? ModelId { get; set; }

    [SupplyParameterFromForm]
    private TaskItemDto Model { get; set; } = new();

    private bool IsSubmitting = false;
    private string ErrorMessage;
    private bool IsEditMode => ModelId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
            Model = await HttpClientFactory.LocalApi().GetFromJsonAsync<TaskItemDto>($"{Route}/{ModelId}");
    }

    private async Task SaveTask()
    {
        IsSubmitting = true;
        ErrorMessage = null;

        try
        {
            HttpResponseMessage response;
            if (IsEditMode)
            {
                response = await HttpClientFactory.LocalApi().PutAsJsonAsync($"{Route}/{ModelId}", Model);
            }
            else
            {
                response = await HttpClientFactory.LocalApi().PostAsJsonAsync(Route, Model);
            }

            if (response.IsSuccessStatusCode)
            {
                var updated = await response.Content.ReadFromJsonAsync<TaskItemDto>();
                NavigationManager.NavigateTo($"/tasks/edit/{updated?.Id}");
            }
            else
            {
                ErrorMessage = response.ReasonPhrase;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/tasks");
    }

}
