@page "/dashboard"
@using FocusFlow.Abstractions.Api.Shared
@using FocusFlow.Blazor.Extensions
<PageTitle>Dashboard</PageTitle>

<h2 class="mb-4"><i class="bi bi-bar-chart-fill"></i> Dashboard Overview</h2>

@if (ErrorMessage != null)
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else if (ProjectStats == null)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!ProjectStats.Any())
{
    <div class="alert alert-warning">No project statistics available.</div>
}
else
{
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var stat in ProjectStats)
        {
            <div class="col">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-kanban"></i> Project: @stat.ProjectId.ToString().Substring(0, 8)...
                        </h5>
                        <ul class="list-group list-group-flush mt-3">
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Total Tasks</span>
                                <span class="badge bg-primary">@stat.Total</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Completed</span>
                                <span class="badge bg-success">@stat.Completed</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Overdue</span>
                                <span class="badge bg-danger">@stat.Overdue</span>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>
}
@inject IHttpClientFactory HttpClientFactory
@code {
    private List<ProjectTaskStatsDto>? ProjectStats;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = null;

            var response = await HttpClientFactory.LocalApi().GetAsync("api/dashboard/project-stats");

            if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = await response.ReadErrorMessageAsync();
                return;
            }

            ProjectStats = await response.Content.ReadFromJsonAsync<List<ProjectTaskStatsDto>>();
        }
        catch (Exception ex)
        {            
            ErrorMessage = "An unexpected error occurred.";
        }
    }
}
