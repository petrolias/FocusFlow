@page "/tasks"

<h3>Tasks</h3>

<button @onclick="CreateTask">Create New Task</button>

<table>
    <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Due Date</th>
            <th>Status</th>
            <th>Priority</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in tasks)
        {
            <tr>
                <td>@task.Title</td>
                <td>@task.Description</td>
                <td>@task.DueDate</td>
                <td>@task.Status</td>
                <td>@task.Priority</td>
                <td>
                    <button @onclick="() => EditTask(task)">Edit</button>
                    <button @onclick="() => DeleteTask(task.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<TaskItem> tasks = new List<TaskItem>();

    [Inject]
    private HttpClient Http { get; set; }

    protected override async Task OnInitializedAsync()
    {
        tasks = await Http.GetFromJsonAsync<List<TaskItem>>("api/tasks");
    }

    private async Task CreateTask()
    {
        var newTask = new TaskItem
        {
            Title = "New Task",
            Description = "Description",
            DueDate = DateTime.Now.AddDays(7),
            Status = "Todo",
            Priority = "Medium"
        };
        var response = await Http.PostAsJsonAsync("api/tasks", newTask);
        if (response.IsSuccessStatusCode)
        {
            tasks = await Http.GetFromJsonAsync<List<TaskItem>>("api/tasks");
        }
    }

    private async Task EditTask(TaskItem task)
    {
        task.Title += " (Edited)";
        var response = await Http.PutAsJsonAsync($"api/tasks/{task.Id}", task);
        if (response.IsSuccessStatusCode)
        {
            tasks = await Http.GetFromJsonAsync<List<TaskItem>>("api/tasks");
        }
    }

    private async Task DeleteTask(int taskId)
    {
        var response = await Http.DeleteAsync($"api/tasks/{taskId}");
        if (response.IsSuccessStatusCode)
        {
            tasks = await Http.GetFromJsonAsync<List<TaskItem>>("api/tasks");
        }
    }

    public class TaskItem
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime DueDate { get; set; }
        public string Status { get; set; }
        public string Priority { get; set; }
    }
}